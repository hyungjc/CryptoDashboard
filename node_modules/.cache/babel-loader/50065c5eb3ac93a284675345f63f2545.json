{"ast":null,"code":"var _jsxFileName = \"/Users/hyungjunchang/Desktop/login/src/frontend/components/Signup.js\",\n    _s = $RefreshSig$();\n\nimport { Form, Button, Card } from 'react-bootstrap';\nimport { useState } from 'react';\nimport httpClient from \"../../httpClient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Signup = () => {\n  _s();\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [repassword, setPasswordConfirm] = useState(\"\");\n  const [pvtKey, setApiPrivate] = useState(\"\");\n  const [pubKey, setApiPublic] = useState(\"\");\n  const [walletAddress, setWalletAddress] = useState(\"\"); // const emailRef = useRef()\n  // const passwordRef = useRef()\n  // const passwordConfirmRef = useRef()\n  // const apiPublicRef = useRef()\n  // const apiPrivateRef = useRef()\n  // const walletAddressRef = useRef()\n\n  const signInUser = async () => {\n    console.log(email);\n\n    if (password != repassword) {\n      alert(\"Passwords do not match\");\n    } else {\n      const resp = await httpClient.post(\"//localhost:5000/signup\", {\n        email,\n        password,\n        repassword,\n        pvtKey,\n        pubKey,\n        walletAddress\n      });\n      console.log(resp.data);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-center mb-4\",\n          children: \"Sign Up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            id: \"email\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"email\",\n              value: email,\n              onChange: e => setEmail(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            id: \"password\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"password\",\n              value: password,\n              onChange: e => setPassword(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            id: \"password-confirm\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Password Confirmation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"password\",\n              value: repassword,\n              onChange: e => setPasswordConfirm(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            id: \"api-public\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"API Private\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"string\",\n              value: pvtKey,\n              onChange: e => setApiPrivate(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            id: \"api-private\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"API Public\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"string\",\n              value: pubKey,\n              onChange: e => setApiPublic(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            id: \"wallet-address\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Wallet Address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"string\",\n              value: walletAddress,\n              onChange: e => setWalletAddress(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"w-100\",\n            type: \"button\",\n            onClick: () => signInUser(),\n            children: \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-100 text-center mt-2\",\n      children: [\"Already have an account? \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/login\",\n        children: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 70\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Signup, \"PLeVvCN/3nAMqU95ySGozSWNxWM=\");\n\n_c = Signup;\nexport default Signup;\n\nvar _c;\n\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"sources":["/Users/hyungjunchang/Desktop/login/src/frontend/components/Signup.js"],"names":["Form","Button","Card","useState","httpClient","Signup","email","setEmail","password","setPassword","repassword","setPasswordConfirm","pvtKey","setApiPrivate","pubKey","setApiPublic","walletAddress","setWalletAddress","signInUser","console","log","alert","resp","post","data","e","target","value"],"mappings":"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","sourcesContent":["import {Form, Button, Card} from 'react-bootstrap'\nimport {useState} from 'react'\nimport httpClient from \"../../httpClient\"\n\nconst Signup = () => {\n        const [email, setEmail] = useState(\"\")\n        const [password, setPassword] = useState(\"\")\n        const [repassword, setPasswordConfirm] = useState(\"\")\n        const [pvtKey, setApiPrivate] = useState(\"\")\n        const [pubKey, setApiPublic] = useState(\"\")\n        const [walletAddress, setWalletAddress] = useState(\"\")\n        \n\n        // const emailRef = useRef()\n        // const passwordRef = useRef()\n        // const passwordConfirmRef = useRef()\n        // const apiPublicRef = useRef()\n        // const apiPrivateRef = useRef()\n        // const walletAddressRef = useRef()\n\n        const signInUser = async () => {\n                console.log(email)\n\n                if (password != repassword){\n                        alert(\"Passwords do not match\")\n                }\n                else{\n                        const resp = await httpClient.post(\"//localhost:5000/signup\", {\n                        email,\n                        password,\n                        repassword,\n                        pvtKey,\n                        pubKey,\n                        walletAddress,\n                });\n\n                console.log(resp.data);\n                }\n                \n\n        }\n\n        \n\n\n  return (\n  <>\n  <Card >\n        <Card.Body>\n                <h2 className=\"text-center mb-4\">Sign Up</h2>\n                <Form>\n                        <Form.Group id = \"email\">\n                                <Form.Label>Email</Form.Label>\n                                <Form.Control type = \"email\" value = {email} onChange = {(e) => setEmail(e.target.value)} required />\n                        </Form.Group>\n                        <Form.Group id = \"password\">\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control type = \"password\" value = {password} onChange = {(e) => setPassword(e.target.value)} required />\n                        </Form.Group>\n                        <Form.Group id = \"password-confirm\">\n                                <Form.Label>Password Confirmation</Form.Label>\n                                <Form.Control type = \"password\" value = {repassword} onChange = {(e) => setPasswordConfirm(e.target.value)}required />\n                        </Form.Group>\n                        <Form.Group id = \"api-public\">\n                                <Form.Label>API Private</Form.Label>\n                                <Form.Control type = \"string\" value = {pvtKey} onChange = {(e) => setApiPrivate(e.target.value)} required />\n                        </Form.Group>\n                        <Form.Group id = \"api-private\">\n                                <Form.Label>API Public</Form.Label>\n                                <Form.Control type = \"string\" value = {pubKey} onChange = {(e) => setApiPublic(e.target.value)} required />\n                        </Form.Group>\n                        <Form.Group id = \"wallet-address\">\n                                <Form.Label>Wallet Address</Form.Label>\n                                <Form.Control type = \"string\" value = {walletAddress} onChange = {(e) => setWalletAddress(e.target.value)} required />\n                        </Form.Group>\n                        <Button className = \"w-100\" type = \"button\" onClick = {() => signInUser()}>Sign Up</Button>\n                </Form>\n        </Card.Body>\n  </Card>\n  <div className = \"w-100 text-center mt-2\">Already have an account? <a href = \"/login\">Log In</a></div>\n  </>\n  )\n};\n\nexport default Signup;\n"]},"metadata":{},"sourceType":"module"}